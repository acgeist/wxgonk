!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALT_MINS	wxgonk.py	/^ALT_MINS = {'vis': 2.0, 'ceiling': 1000}$/;"	v
ALT_REQ	wxgonk.py	/^ALT_REQ = {'vis': 3.0, 'ceiling': 2000}$/;"	v
COUNTRY_DICT	wxgonk.py	/^COUNTRY_DICT = countries.make_country_dict()$/;"	v
DEST_ID	wxgonk.py	/^DEST_ID = TEST_FIELDS[0]$/;"	v
FILING_MINS	wxgonk.py	/^FILING_MINS = {'vis': 1.5, 'ceiling': 500}$/;"	v
InvalidDataType	wxgonk.py	/^class InvalidDataType(Exception):$/;"	c
InvalidFunctionInput	wxgonk.py	/^class InvalidFunctionInput(Exception):$/;"	c
InvalidFunctionInput	wxurlmaker.py	/^class InvalidFunctionInput(Exception):$/;"	c
LatLongTestCase	test_latlongcalcs.py	/^class LatLongTestCase(unittest.TestCase):$/;"	c
NO_CEIL_VAL	wxgonk.py	/^NO_CEIL_VAL = 99999$/;"	v
TEST_FIELDS	wxgonk.py	/^        TEST_FIELDS = gen_bad_fields(sys.argv[1])$/;"	v
TEST_FIELDS	wxgonk.py	/^    TEST_FIELDS = gen_bad_fields()$/;"	v
TEST_FIELDS	wxgonk.py	/^TEST_FIELDS = []$/;"	v
can_file_metar	wxgonk.py	/^def can_file_metar(metar_node, field:str) -> bool:$/;"	f
card_from_hdg	latlongcalcs.py	/^def card_from_hdg(hdg:float) -> str:$/;"	f
country_dict	countries.py	/^country_dict = make_country_dict()$/;"	v
country_name_from_code	countries.py	/^def country_name_from_code(code:str) -> str:$/;"	f
dist_between_coords	latlongcalcs.py	/^def dist_between_coords(lat1, long1, lat2, long2, units:str = 'nm') -> float:$/;"	f
field_root	wxgonk.py	/^field_root = get_root(field_url)$/;"	v
field_url	wxgonk.py	/^field_url = wxurlmaker.make_adds_url('fields', TEST_FIELDS)    $/;"	v
gen_bad_fields	wxgonk.py	/^def gen_bad_fields(country:str = '00', num_results:int = 10) -> List[str]:$/;"	f
get_ceiling	wxgonk.py	/^def get_ceiling(node) -> int:$/;"	f
get_raw_text	wxgonk.py	/^def get_raw_text(field:str, metar_or_taf:str) -> str:$/;"	f
get_root	wxgonk.py	/^def get_root(url:str):$/;"	f
get_vis	wxgonk.py	/^def get_vis(node) -> str:$/;"	f
has_ceiling	wxgonk.py	/^def has_ceiling(node) -> bool:$/;"	f
hav	latlongcalcs.py	/^def hav(angle:float) -> float:$/;"	f
hdg_between_coords	latlongcalcs.py	/^def hdg_between_coords(lat1, long1, lat2, long2) -> float:$/;"	f
html_str	wxgonk.py	/^    html_str = 'Content-type: text\/html\\n\\n'$/;"	v
is_valid_country	countries.py	/^def is_valid_country(country:str) -> bool:$/;"	f
makeUrlBadInput	test_wxgonk.py	/^class makeUrlBadInput(unittest.TestCase):$/;"	c
make_adds_url	wxurlmaker.py	/^def make_adds_url($/;"	f
make_coord_list	wxgonk.py	/^def make_coord_list():$/;"	f
make_country_dict	countries.py	/^def make_country_dict($/;"	f
make_map_url	mapurlmaker.py	/^def make_map_url(points:List[Dict[str, float]], country:str = 'us')->str:$/;"	f
make_metar_taf_url	wxurlmaker.py	/^def make_metar_taf_url(stationList:List[str]) -> str:$/;"	f
map_request	wxgonk.py	/^map_request = requests.get(map_url)$/;"	v
map_url	wxgonk.py	/^map_url = mapurlmaker.make_map_url(make_coord_list())$/;"	v
metar_root	wxgonk.py	/^metar_root = get_root(metar_url)$/;"	v
metar_url	wxgonk.py	/^metar_url = wxurlmaker.make_adds_url('metars', TEST_FIELDS)    $/;"	v
node_contains_field	wxgonk.py	/^def node_contains_field(node, field:str) -> bool:$/;"	f
print_node	wxgonk.py	/^def print_node(node, indent:int = 0):$/;"	f
req_alt	wxgonk.py	/^def req_alt(node) -> bool:$/;"	f
roots	wxgonk.py	/^roots = [taf_root, metar_root, field_root]$/;"	v
run_wxgonk	links.html	/^function run_wxgonk(){$/;"	f
taf_root	wxgonk.py	/^taf_root = get_root(taf_url)$/;"	v
taf_url	wxgonk.py	/^taf_url = wxurlmaker.make_adds_url('tafs', TEST_FIELDS)    $/;"	v
test	wxgonk.py	/^def test():$/;"	f
test_data_type_not_string	test_wxgonk.py	/^    def test_data_type_not_string(self):$/;"	m	class:makeUrlBadInput
test_hav_bad_input	test_latlongcalcs.py	/^    def test_hav_bad_input(self):$/;"	m	class:LatLongTestCase
test_invalid_data_type	test_wxgonk.py	/^    def test_invalid_data_type(self):$/;"	m	class:makeUrlBadInput
test_known_values_hav	test_latlongcalcs.py	/^    def test_known_values_hav(self):$/;"	m	class:LatLongTestCase
test_known_values_hdg	test_latlongcalcs.py	/^    def test_known_values_hdg(self):$/;"	m	class:LatLongTestCase
urls	wxgonk.py	/^urls = [taf_url, metar_url, field_url]$/;"	v
valid_alt	wxgonk.py	/^def valid_alt(node, field:str) -> bool:$/;"	f
